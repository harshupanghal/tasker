@page "/register"
@rendermode InteractiveServer
@using Tasker.Application.DTOs
@using Tasker.Application.Interfaces
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<div class="card p-4 mx-auto" style="max-width: 400px;">
    <h3 class="card-title text-center mb-4">Register for Tasker</h3>

    <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister" FormName="RegisterForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mb-3" role="alert">
                @successMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mb-3" role="alert">
                @errorMessage
            </div>
        }

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="registerRequest.Username" />
            <ValidationMessage For="@(() => registerRequest.Username)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" />
            <ValidationMessage For="@(() => registerRequest.Email)" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" />
            <ValidationMessage For="@(() => registerRequest.Password)" />
        </div>

        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerRequest.ConfirmPassword" />
            <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Register</button>
    </EditForm>

    <p class="text-center mt-3">
        Already have an account? <a href="/login">Login here</a>
    </p>
</div>

@code {
    private RegisterRequest registerRequest = new RegisterRequest();
    private string? errorMessage;
    private string? successMessage;

    private async System.Threading.Tasks.Task HandleRegister()
    {
        errorMessage = null;
        successMessage = null;

        try
        {
            var response = await AuthService.RegisterAsync(registerRequest);

            if (response.Success)
            {
                successMessage = response.Message ?? "Registration successful! You can now log in.";
                registerRequest = new RegisterRequest(); // Clear the form
                // Optionally navigate to login page after a delay or immediately
                // NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = response.Message ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred during registration. Please try again.";
            Logger.LogError(ex, "Registration failed for username: {Username}", registerRequest.Username);
        }
    }
}