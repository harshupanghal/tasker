@page "/tasks/create"
@rendermode InteractiveServer 
@using Tasker.Application.DTOs
@using Tasker.Application.UseCases.Tasks
@inject CreateTaskUseCase CreateTaskUseCase
@inject NavigationManager NavigationManager
@inject ILogger<CreateTask> Logger

<PageTitle>Create New Task</PageTitle>

<h1>Create New Task</h1>

<EditForm Model="@createTaskRequest" OnValidSubmit="@HandleValidSubmit" FormName="CreateTaskForm"> @* <-- ADD THIS: FormName="CreateTaskForm" *@
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mb-3" role="alert">
            @errorMessage
        </div>
    }

    <div class="mb-3">
        <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
        <InputText id="title" class="form-control" @bind-Value="createTaskRequest.Title" />
        <ValidationMessage For="@(() => createTaskRequest.Title)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="createTaskRequest.Description" />
        <ValidationMessage For="@(() => createTaskRequest.Description)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Task</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Cancel</button>
</EditForm>

@code {
    private CreateTaskRequest createTaskRequest = new CreateTaskRequest();
    private string? errorMessage;
    private int currentUserId = 1; // TEMPORARY: Replace with actual authenticated user ID

    private async System.Threading.Tasks.Task HandleValidSubmit()
    {
        errorMessage = null;

        try
        {
            if (currentUserId <= 0)
            {
                errorMessage = "User ID is required for task creation. Please log in.";
                Logger.LogWarning("Attempted to create task with invalid or missing user ID.");
                return;
            }

            TaskResponse response = await CreateTaskUseCase.ExecuteAsync(currentUserId, createTaskRequest);

            NavigationManager.NavigateTo($"/tasks/{response.Id}");
        }
        catch (UnauthorizedAccessException ex)
        {
            errorMessage = "You are not authorized to create tasks. Please ensure you are logged in correctly.";
            Logger.LogWarning(ex, "Unauthorized attempt to create task by user {UserId}", currentUserId);
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
            Logger.LogWarning(ex, "Validation error when creating task for user {UserId}", currentUserId);
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred while creating the task. Please try again.";
            Logger.LogError(ex, "Error creating task for user {UserId} with title '{Title}'", currentUserId, createTaskRequest.Title);
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/tasks");
    }
}